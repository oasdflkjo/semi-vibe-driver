name: Create Release

on:
  push:
    tags:
      - 'v*'  # Push events to tags matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Configure CMake
      run: |
        New-Item -Path build -ItemType Directory -Force
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
      shell: pwsh
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
      shell: pwsh
    
    - name: Check Build Output
      run: |
        Get-ChildItem -Path build/bin/Release -Force
        if (-not (Test-Path "build/bin/Release/semi_vibe_device.dll")) {
          Write-Error "Device DLL not found!"
          exit 1
        }
        if (-not (Test-Path "build/bin/Release/semi_vibe_driver.dll")) {
          Write-Error "Driver DLL not found!"
          exit 1
        }
      shell: pwsh
    
    - name: Run Tests
      run: |
        # Temporarily copy Release DLLs to Debug location for tests
        New-Item -Path build/bin/Debug -ItemType Directory -Force
        Copy-Item -Path build/bin/Release/*.dll -Destination build/bin/Debug/
        python run_tests.py
      shell: pwsh
    
    - name: Create Artifact Directory
      run: |
        New-Item -Path artifacts/include -ItemType Directory -Force
        New-Item -Path artifacts/lib -ItemType Directory -Force
        New-Item -Path artifacts/bin -ItemType Directory -Force
      shell: pwsh
    
    - name: Copy Headers and DLLs to Artifact Directory
      run: |
        # Copy header files
        Copy-Item -Path include/*.h -Destination artifacts/include/
        
        # Copy DLLs
        Copy-Item -Path build/bin/Release/*.dll -Destination artifacts/bin/
        
        # Copy lib files if they exist
        if (Test-Path "build/lib/Release/*.lib") {
          Copy-Item -Path build/lib/Release/*.lib -Destination artifacts/lib/
        } else {
          Write-Host "No lib files found"
        }
      shell: pwsh
    
    - name: Create ZIP Archive
      run: |
        Compress-Archive -Path artifacts/* -DestinationPath semi-vibe-driver.zip
      shell: pwsh
    
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: ./semi-vibe-driver.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 